# Setup
library(tidyverse)
library(rvest)
library(nbastatR)
library(lubridate)
library(janitor)
library(heapsofpapers)
library(arrow)
library(modelsummary)
library(bayesplot)
library(vtable)
# Here we will play around with some 4th quarter play by play data,
# some of the manipulation may be moved to cleaning folder.
pbp <- read_parquet("data/analysis/pbp_4thonly")

# Function that takes play-by-play string and returns a simplified string for shots
# Perhaps extend to turnovers? and other plays
identify_shot <- function(play) {
  if (grepl("MISS", play)) {
    if (grepl("Free Throw", play)) {
      return("FT missed")
    } else if (grepl("3PT Jump Shot|Pullup Jump Shot", play)) {
      return("3PT missed")
    } else if (grepl("Jump Shot|Layup|Dunk", play) && !grepl("3PT", play)) {
      return("2PT missed")
    }
  } else {
    if (grepl("Free Throw", play)) {
      return("FT made")
    } else if (grepl("3PT", play)) {
      return("3PT made")
    } else if (grepl("Layup|Jump Shot|Dunk", play) && !grepl("3PT", play)) {
      return("2PT made")
    }
  }
}

# Create Boolean for shot types
pbp_test <- pbp |> mutate(
  gameteam_id = paste(as.character(id_game), team_name_player1, sep="-"),
  play_h = sapply(pbp_home, identify_shot),
  play_a = sapply(pbp_away, identify_shot),
  att_2pt_h = ifelse(grepl("2PT", play_h), TRUE, FALSE),
  made_2pt_h = "2PT made" == play_h,
  att_3pt_h = ifelse(grepl("3PT", play_h), TRUE, FALSE),
  made_3pt_h = "3PT made" == play_h,
  att_ft_h = ifelse(grepl("FT", play_h), TRUE, FALSE),
  made_ft_h = "FT made" == play_h,
  att_2pt_a = ifelse(grepl("2PT", play_a), TRUE, FALSE),
  made_2pt_a = "2PT made" == play_a,
  att_3pt_a = ifelse(grepl("3PT", play_a), TRUE, FALSE),
  made_3pt_a = "3PT made" == play_a,
  att_ft_a = ifelse(grepl("FT", play_a), TRUE, FALSE),
  made_ft_a = "FT made" == play_a)

# Now grouping by game_id and team_name
pbp_group_test <- pbp_test %>% 
    group_by(id_game, team_name_player1) %>%
    rename(team = team_name_player1) %>%
    summarise(
    att_3_h = sum(att_3pt_h),
    made_3_h = sum(made_3pt_h),
    att_2_h = sum(att_2pt_h),
    made_2_h = sum(made_2pt_h),
    att_ft_h = sum(att_ft_h),
    made_ft_h = sum(made_ft_h),
    att_3_a = sum(att_3pt_a), 
    made_3_a = sum(made_3pt_a),
    att_2_a = sum(att_2pt_a),
    made_2_a = sum(made_2pt_a),
    att_ft_a = sum(att_ft_a),
    made_ft_a = sum(made_ft_a)) %>%
    mutate(
      gameteam_id = paste(as.character(id_game), team, sep="-"),
      home = ifelse(att_3_h + att_2_h + att_ft_h > 0, TRUE, FALSE)
    ) %>% filter(!is.na(team)) %>% ungroup()

# Just data from said team, and adds shot%

teamgameshots <-pbp_group_test |> 
  mutate(pct_3pt = ifelse(home, ifelse(att_3_h == 0, 0, made_3_h/att_3_h), ifelse(att_3_a == 0, 0, made_3_a/att_3_a)),
         pct_2pt = ifelse(home, ifelse(att_2_h == 0, 0, made_2_h/att_2_h), ifelse(att_2_a == 0, 0, made_2_a/att_2_a)),
         pct_ft = ifelse(home, ifelse(att_ft_h == 0, 0, made_ft_h/att_ft_h), ifelse(att_ft_a == 0, 0, made_ft_a/att_ft_a)),
         att_3pt = ifelse(home, att_3_h, att_3_a),
         att_2pt = ifelse(home, att_2_h, att_2_a),
         att_ft = ifelse(home, att_ft_h, att_ft_a),
         made_ft = ifelse(home, made_ft_h, made_ft_a),
         opp_pct_3pt = ifelse(home, made_ft_a/att_ft_a, made_ft_h/att_ft_h), #this mehod for opp stats doesnt work!!!!!
         opp_pct_2pt =  ifelse(home, made_ft_a/att_ft_a, made_ft_h/att_ft_h), #because away stats are empty in summarize table
         opp_pct_ft = ifelse(home, made_ft_a/att_ft_a, made_ft_h/att_ft_h),
         opp_att_3pt = ifelse(home, att_3_a, att_3_h),
         opp_att_2pt = ifelse(home, att_2_a, att_2_h),
         opp_att_ft = ifelse(home, att_ft_a, att_ft_h)
         ) %>%
  select(gameteam_id, id_game, team, home, pct_3pt, pct_2pt, pct_ft, att_3pt, att_2pt, att_ft, made_ft, opp_pct_3pt, opp_pct_2pt, opp_pct_ft, opp_att_3pt, opp_att_2pt,  , opp_att_ft)

#will use this table to id home team
# gather and group score, 4Q lead data per team per game
hometeam <- pbp_group_test |> select(gameteam_id, id_game, team, home)

quarter_start <- pbp_test %>% 
    filter(grepl("Start of 4th Period", description_play_neutral)) %>%
    select(id_game, score_away, score_home, margin_score) %>%
    rename(q4_margin_h = margin_score)

quarter_end <- pbp_test %>% 
    filter(grepl("End of 4th Period", description_play_neutral)) %>%
    select(id_game, score_away, score_home, margin_score) %>%
    mutate(margin_score = ifelse(score_away == score_home, 0, margin_score)) %>%
    rename(final_score_a = score_away,
           final_score_h = score_home,
           final_margin_h = margin_score)

teamgamescores <- inner_join(hometeam, quarter_start, by = "id_game")
teamgamescores <- inner_join(teamgamescores, quarter_end, by = "id_game")

teamgamescores <- teamgamescores %>%
  rename(q4_margin = q4_margin_h, final_margin = final_margin_h) %>%
  mutate(q4_margin = ifelse(home, q4_margin, -q4_margin),
         final_margin = ifelse(home, final_margin, -final_margin),
         win = final_margin > 0) 
#combine data
sub_teamgamescores <- teamgamescores |> subset(select = -c(id_game, team, home))


teamgame <- inner_join(sub_teamgamescores, teamgameshots, by = "gameteam_id", keep(.x))

write_parquet(x = teamgame, sink ="data/analysis/cleaned_pbp.parquet")